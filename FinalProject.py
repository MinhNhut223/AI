# -*- coding: utf-8 -*-
"""FinalProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j4892xmLrXkMUjeXXU1U2LMDc5yvrrer
"""

from os import listdir
from numpy import asarray, save
from keras.utils import load_img
from keras.utils import img_to_array

folder = '/content/drive/MyDrive/FinalProject/Train1/'
photos, labels = list(), list()
for file in listdir(folder):
  output= 0.0
  if file.startswith('Bus'):
    output= 1.0
  if file.startswith('Car'):
    output= 2.0
  if file.startswith('Motorbike'):
    output= 3.0
  if file.startswith('Plane'):
    output= 4.0
  if file.startswith('Truck'):
    output= 5.0
  if file.startswith('Helicopter'):
    output= 6.0
  if file.startswith('Boat'):
    output= 7.0
  if file.startswith('Ship'):
    output= 8.0
  if file.startswith('Bicycle'):
    output= 9.0
  photo = load_img(folder + file, target_size= (40,40))
  photo= img_to_array(photo)

  photos.append(photo)
  labels.append(output)

from google.colab import drive
drive.mount('/content/drive')

photos= asarray(photos)
labels= asarray(labels)
print(photos.shape, labels.shape)
save('/content/drive/MyDrive/FinalProject/FinalProject1.npy', photos)
save('/content/drive/MyDrive/FinalProject/FinalProject2.npy', labels)

split_index = int(0.05 * len(photos))
test_x, test_y = photos[:split_index], labels[:split_index]
train_x, train_y = photos[split_index:], labels[split_index:]

print(test_x.shape, train_x.shape)

train_x = train_x.reshape((27861, 40, 40, 3))
train_x = train_x.astype('float32')/255

test_x = test_x.reshape((1466, 40, 40, 3))
test_x = test_x.astype('float32')/255

from keras.utils import to_categorical
train_y = to_categorical(train_y,10)
test_y = to_categorical(test_y,10)

from keras.models import Sequential,Model
from keras.layers import Dense,Flatten,Dropout,Conv2D,MaxPooling2D,Normalization,Input
from keras.optimizers import Adam
from keras import losses
loss = losses
batch_size = 40
epochs = 15
classes = 10

from keras.layers import LeakyReLU
model = Sequential()
model.add(Conv2D(32, kernel_size = (3,3), activation = 'linear', input_shape = (40, 40, 3), padding= 'same'))
model.add(LeakyReLU(alpha = 0.1))

model.add(MaxPooling2D((2,2), padding = 'same'))
model.add(Conv2D(64, (3,3), activation = 'linear', padding = 'same'))
model.add(Conv2D(64, (3,3), activation = 'linear', padding = 'same'))
model.add(LeakyReLU(alpha = 0.1))

model.add(MaxPooling2D((2,2), padding = 'same'))
model.add(Conv2D(128, (3,3), activation = 'linear', padding = 'same'))
model.add(LeakyReLU(alpha = 0.1))

model.add(MaxPooling2D((2,2), padding = 'same'))
model.add(Conv2D(256, (3,3), activation = 'linear', padding = 'same'))
model.add(LeakyReLU(alpha = 0.1))

model.add(MaxPooling2D((2,2), padding = 'same'))
model.add(Conv2D(512, (3,3), activation = 'linear', padding = 'same'))
model.add(LeakyReLU(alpha = 0.1))

from keras.losses import categorical_crossentropy
model.add(Flatten())
model.add(Dense(512, activation = 'linear'))

model.add(Dense(classes, activation = 'softmax'))
model.summary()

#Compile:
model.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])
train = model.fit(train_x, train_y, batch_size= batch_size, epochs= epochs, verbose= 1)

# Evaluate model
test_loss, test_acc = model.evaluate(test_x, test_y)
print('Test accuracy:', test_acc)

import matplotlib.pyplot as plt
import numpy as np
from os import listdir
from keras.utils import load_img
from keras.utils.image_utils import img_to_array
folder = '/content/drive/MyDrive/FinalProject/Check/'
for file in listdir(folder):
  photo = load_img(folder  +  file)
  plt.imshow(photo)
  
  photo = load_img(folder +   file, target_size = (40, 40))
  photo=img_to_array(photo)
  photo=photo.astype('float32')
  photo=photo/255
  photo=np.expand_dims(photo,axis=0)
  result=(model.predict(photo).argmax())
  class_name=['','Bus', 'Car', 'Motorbike', 'Plane', 'Truck', 'Helicopter', 'Boat', 'Ship', 'Bicycle']
  print(class_name[result])
  plt.show()